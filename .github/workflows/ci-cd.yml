name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'fix/*' ]
  pull_request:
    branches: [ main, develop, 'fix/*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    # 환경변수 설정
    env:
      ENVIRONMENT: development
      DEBUG: true
      LOG_LEVEL: INFO
      GITHUB_ACTIONS: true
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          # Install test tools first (including pytest-env)
          pip install pytest==8.3.4 pytest-asyncio==0.25.0 pytest-env==1.1.5 flake8==7.1.1 black==25.1.0 isort==5.13.2
          # Then install project dependencies
          pip install -r requirements.txt

      - name: Code Quality Check
        run: |
          # Check only critical syntax errors
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          echo "Code quality check completed"

      - name: Run Tests
        run: |
          export APP_NAME="Ururu AI Recommendation System"
          export EMBEDDING_MODEL_NAME="sentence-transformers/all-MiniLM-L6-v2"
          export EMBEDDING_DIMENSION="384"
          python -m pytest tests/ -v --tb=short
        continue-on-error: false

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-development:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Checkout Config Repository
        uses: actions/checkout@v4
        with:
          repository: UruruLab/Ururu-AI-Config
          path: config
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Copy Development Environment Config Files
        run: |
          if compgen -G "config/.env*" > /dev/null; then
            if [ -f "config/.env.development" ]; then
              cp config/.env.development .env.development
              echo "✅ Development environment config files copied successfully"
            else
              echo "❌ .env.development not found in config repository"
              exit 1
            fi
          else
            echo "❌ No config files found in config repository"
            exit 1
          fi

      - name: Validate Docker Compose Configuration
        run: |
          echo "Validating development environment configuration files"
          echo "Validating docker-compose.development.yml syntax"
          ENVIRONMENT=development docker compose -f docker-compose.development.yml config --quiet
          echo "Development environment deployment preparation completed"

      - name: Simulate Deployment (No actual EC2 deployment)
        run: |
          echo "Development environment deployment simulation"
          echo "- Docker Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
          echo "- Config File: .env.development (fetched from Config repository)"
          echo "Development environment deployment configuration completed"

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Checkout Config Repository
        uses: actions/checkout@v4
        with:
          repository: UruruLab/Ururu-AI-Config
          path: config
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Copy Production Environment Config Files
        run: |
          if compgen -G "config/.env*" > /dev/null; then
            if [ -f "config/.env.production" ]; then
              cp config/.env.production .env.production
              echo "✅ Production environment config files copied successfully"
            else
              echo "❌ .env.production not found in config repository"
              exit 1
            fi
          else
            echo "❌ No config files found in config repository"
            exit 1
          fi
        
      - name: Validate Docker Compose Configuration
        run: |
          echo "Validating production environment configuration files"
          echo "Production environment deployment preparation completed"

      - name: Deploy to Production EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.PROD_EC2_HOST }}
          username: ${{ secrets.PROD_EC2_USER }}
          key: ${{ secrets.PROD_EC2_SSH_KEY }}
          port: 22
          timeout: 600s
          script: |
            set -e
            echo "Production AI service deployment started"
            
            if docker ps | grep ururu-ai-service; then
              echo "Existing AI service found"
              docker logs --tail 5 ururu-ai-service
            fi
            
            cd /home/ec2-user/Ururu-AI
            git fetch origin
            git checkout main
            git reset --hard origin/main
            echo "Code update completed"
            
            docker build -t ururu-ai:latest .
            echo "Docker image build completed"
            
            cd /home/ec2-user/app
            docker compose -f docker-compose-prod.yml stop ururu-ai || true
            docker compose -f docker-compose-prod.yml up -d ururu-ai
            echo "AI service restart completed"
            
            echo "Waiting for service to be ready..."
            for i in {1..60}; do
              if curl -f http://localhost:8000/health 2>/dev/null; then
                echo "AI service is healthy"
                break
              fi
              if [ $i -eq 60 ]; then
                echo "Health check failed"
                docker logs --tail 10 ururu-ai-service
                exit 1
              fi
              sleep 5
            done
            
            if curl -f http://localhost:8000/api/recommendations/spring-health 2>/dev/null; then
              echo "Spring Boot integration verified"
            else
              echo "Spring Boot integration check failed"
              docker logs --tail 5 ururu-ai-service
            fi
            
            VECTOR_STATUS=$(curl -s http://localhost:8000/api/vector/status | grep -o '"total_vectors":[0-9]*' | cut -d':' -f2 || echo "0")
            echo "Vector index status: $VECTOR_STATUS vectors"
            
            if [ "$VECTOR_STATUS" -lt 1000 ]; then
              echo "Vector count low, triggering embedding regeneration"
              curl -X POST "http://localhost:8000/api/vector/embeddings/batch?batch_size=100&force_recreate=false" || echo "Embedding regeneration request failed"
            fi
            
            echo "Production AI service deployment completed"
            echo "$(date): AI service deployed - commit: $GITHUB_SHA" >> /home/ec2-user/deployment.log

      - name: Deployment Notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Production AI service deployment successful"
            echo "AI Service: http://3.39.69.34:8000"
            echo "API Documentation: http://3.39.69.34:8000/docs"
            echo "AI recommendation service is now available"
          else
            echo "Production AI service deployment failed"
            echo "Check EC2 logs: docker logs ururu-ai-service"
          fi

      - name: Create Deployment Issue on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Production AI Service Deployment Failed',
              body: `## As Is (Current Issue)
            
            Production AI service automated deployment has failed.
            
            **Deployment Information:**
            - Commit: ${context.sha}
            - Branch: ${context.ref}
            - Execution Time: ${new Date().toISOString()}
            - Workflow: ${context.workflow}
            ## To Be (Expected Behavior)
            
            AI service should be deployed successfully and available for frontend AI recommendation features.
            
            ## Deadline
            
            Critical fix required within 1 hour
            
            ## References
            
            - [Workflow Execution Log](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - [EC2 AI Service Status](http://3.39.69.34:8000/health)
            - [AI API Documentation](http://3.39.69.34:8000/docs)
            `,
              labels: ['urgent', 'ai-service', 'deployment']
            })